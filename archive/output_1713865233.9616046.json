{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 2}, "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_add_user_to_role", "rerun": "0"}, "1": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_add_user_to_role_twice", "rerun": "0"}}, "suite_name": "test/api_tests/djnago_app/django_roles/test_add_user_to_role.py"}, "1": {"suite_name": "test/api_tests/djnago_app/test_django_user/create_users/test_post_users.py", "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}}, "2": {"suite_name": "test/api_tests/djnago_app/test_django_user/create_users/test_post_users_negative.py", "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_username[None]", "rerun": "0"}, "1": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_username[empty]", "rerun": "0"}, "2": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_username[1 char(3 min)]", "rerun": "0"}, "3": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_username[2 chars(3 min)]", "rerun": "0"}, "4": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_username[list]", "rerun": "0"}, "5": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_data_for_properties[username-None]", "rerun": "0"}, "6": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_data_for_properties[username-empty]", "rerun": "0"}, "7": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_data_for_properties[password-None]", "rerun": "0"}, "8": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_data_for_properties[password-empty]", "rerun": "0"}, "9": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_data_for_properties[email-None]", "rerun": "0"}, "10": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_data_for_properties[email-empty]", "rerun": "0"}, "11": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_password[3 char(6 min)]", "rerun": "0"}, "12": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_password[5 chars(6 min)]", "rerun": "0"}, "13": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_password[only small]", "rerun": "0"}, "14": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_password[only capital]", "rerun": "0"}, "15": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_password[only numbers]", "rerun": "0"}, "16": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_create_users_wrong_password[list]", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 17}}, "3": {"suite_name": "test/api_tests/djnago_app/test_django_user/get_user/test_get_user.py", "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_get_user", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}}, "4": {"suite_name": "test/api_tests/djnago_app/test_django_user/get_users/test_get_users.py", "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_get_all_users", "rerun": "0"}, "1": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_get_all_users_with_params", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 2}}, "5": {"suite_name": "test/api_tests/djnago_app/test_django_user/get_users/test_unexpected_method_users.py", "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_unexpected_method_all_users_with_params[delete]", "rerun": "0"}, "1": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_unexpected_method_all_users_with_params[put]", "rerun": "0"}, "2": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def create_read_user():\n        user_data = PayloadDjangoUserDTO.random()\n>       resp = django_ctrl.create_user(user_data.serialize())\n\ntest\\api_tests\\djnago_app\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\api_service\\django_app\\controller\\users_api.py:24: in create_user\n    return self.api_executor.post(\ncore\\api_service\\base_api.py:39: in post\n    return self.__execute_request('post', url=url, data=data, headers=headers,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.api_service.base_api.BaseApi object at 0x0000021E22EE9B50>, method = 'post', url = 'http://localhost:8000/api/users/', params = None\ndata = {'email': 'jessica30@example.net', 'password': 'Password11', 'username': 'Robert Smi'}, headers = None, expected_status_code = 201, schema = <DjangoUserSchema(many=False)>\n\n    def __execute_request(self, method, url, params=None, data=None, headers=None, expected_status_code=None,\n                          schema=None):\n        logger.info(f'send {method}request to {url} with params {params}\\nbody = {data}')\n        response = requests.request(\n            method=method,\n            url=url,\n            params=params or {},  # None or {} = {}, {1:2} or {} = {1:2}\n            data=data,\n            headers=headers or {}\n        )\n        logger.info(f'response is {response.status_code}')\n        logger.info(response.text)\n        if expected_status_code:\n>           assert response.status_code == expected_status_code, (f'Incorrect status code for {response.url}\\n'\n                                                                  f'expected {expected_status_code}\\n'\n                                                                  f'actual {response.status_code}')\nE           AssertionError: Incorrect status code for http://localhost:8000/api/users/\nE           expected 201\nE           actual 500\n\ncore\\api_service\\base_api.py:24: AssertionError\n", "test_name": "test_unexpected_method_all_users_with_params[path]", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 3}}, "6": {"suite_name": "test/test_add_user_to_role.py", "tests": {"0": {"status": "ERROR", "message": "file C:\\Users\\artem\\PycharmProjects\\do\\test\\test_add_user_to_role.py, line 6\n  def test_add_user_to_role(create_read_role, create_read_user_function_scope):\nE       fixture 'create_read_role' not found\n>       available fixtures: _session_faker, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, extra, extras, faker, include_metadata_in_junit_xml, metadata, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\nC:\\Users\\artem\\PycharmProjects\\do\\test\\test_add_user_to_role.py:6\n", "test_name": "test_add_user_to_role", "rerun": "0"}, "1": {"status": "ERROR", "message": "file C:\\Users\\artem\\PycharmProjects\\do\\test\\test_add_user_to_role.py, line 17\n  def test_add_user_to_role_twice(create_read_role, create_read_user_function_scope):\nE       fixture 'create_read_role' not found\n>       available fixtures: _session_faker, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, extra, extras, faker, include_metadata_in_junit_xml, metadata, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\nC:\\Users\\artem\\PycharmProjects\\do\\test\\test_add_user_to_role.py:17\n", "test_name": "test_add_user_to_role_twice", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 2}}}}, "date": "April 23, 2024", "start_time": 1713860545.6411078, "total_suite": 7, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "28", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "28"}